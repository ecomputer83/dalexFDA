<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using PropertyChanged;
using Xamarin.Forms;

namespace <#= Project.Namespace #>
{
    [AddINotifyPropertyChangedInterface]
    public partial class <#= Page.Name #>ItemViewModel
    {
        internal readonly <#= Page.Name #>ViewModel Parent;

        //commands
<# foreach (var command in Page.Commands.Where(c=>c.ForListItem)) 
{ #>        public Command <#= command.Name #> { get; private set; }
<# } #>

        //properties
<# foreach (var property in Page.Properties.Where(c=>c.ForListItem)) 
{ #>        public <#= property.TypeName #> <#= property.Name #> { get; set; }
<# } #>


        public <#= Page.Name #>ItemViewModel
        (
            <#= Page.Name #>ViewModel parent
        )
        {
            this.Parent = parent;

            //setup commands
<# foreach (var command in Page.Commands.Where(c=>c.ForListItem)) 
{ #>            <#= command.Name #> = new Command(async () => await Execute<#= command.Name #>());
<# } #>  
            Setup();
        }

<# 
bool writeCommandCode = true;
foreach (var command in Page.Commands.Where(c=>c.ForListItem)) 
{ 
    writeCommandCode = !FileContainsText(ViewModelFilePath, String.Format("Execute{0}",command.Name));
    if(writeCommandCode)
    {    
#>            
        private async Task Execute<#= command.Name #>()
        {
            try
            {
                await Parent.CoreMethods.DisplayAlert("<#= command.Name #>","<#= command.Name #>","OK");
            }
            catch(Exception ex)
            {
                await Parent.ErrorManager.DisplayErrorMessageAsync(ex);
            }
        }
<# }
} #> 
    }
}
