<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using PropertyChanged;
using Xamarin.Forms;

namespace <#= Project.Namespace #>
{
    [AddINotifyPropertyChangedInterface]
    public partial class <#= Page.Name #>ViewModel
    {
        //default services
<# foreach (var service in Project.Services.Where(s => s.IsDefault)) 
{ #>        internal readonly <#= service.FullTypeName #> <#= service.DisplayName #>;
<# } #>

        //other services
<# foreach (var pageService in Page.Services) { var service = Page.GetService(Project,pageService); 
  #>        internal readonly <#= service.FullTypeName #> <#= service.DisplayName #>;
<# } #>

        //commands
<# foreach (var command in Page.Commands.Where(c=>!c.ForListItem)) 
{ #>        public Command <#= command.Name #> { get; private set; }
<# } #>

        //properties
<# foreach (var property in Page.Properties.Where(c=>!c.ForListItem)) 
{ #>        public <#= property.TypeName #> <#= property.Name #> { get; set; }
<# } #>

        public <#= Page.Name #>ViewModel
        (
<# 
        string sep = " ";
        foreach (var service in Project.Services.Where(s => s.IsDefault)) { 
#>          <#= sep#><#= service.FullTypeName #> <#= service.DisplayName #>
<# sep = ",";} 

          foreach (var pageService in Page.Services) { var service = Page.GetService(Project,pageService);
#>          <#= sep#><#= service.FullTypeName #> <#= service.DisplayName #>
<# sep = ",";} 
#>
        )
        {
            //setup default services
<# foreach (var service in Project.Services.Where(s => s.IsDefault)) 
{ #>            this.<#= service.DisplayName #> = <#= service.DisplayName #>;
<# } #>

            //setup other services
<# foreach (var pageService in Page.Services) { var service = Page.GetService(Project,pageService); 
  #>            this.<#= service.DisplayName #> = <#= service.DisplayName #>;
<# } #>

            //setup commands
<# foreach (var command in Page.Commands.Where(c=>!c.ForListItem)) 
{ #>            <#= command.Name #> = new Command(async () => await Execute<#= command.Name #>());
<# } #>  
            Setup();
        }

<# 
bool writeCommandCode = true;
foreach (var command in Page.Commands.Where(c=>!c.ForListItem)) 
{ 
    writeCommandCode = !FileContainsText(ViewModelFilePath, String.Format("Execute{0}",command.Name));
    if(writeCommandCode)
    {    
#>            
        private async Task Execute<#= command.Name #>()
        {
            try
            {
                await this.CoreMethods.DisplayAlert("<#= command.Name #>","<#= command.Name #>","OK");
            }
            catch(Exception ex)
            {
                await ErrorManager.DisplayErrorMessageAsync(ex);
            }
        }
<# }
} #> 

<# if(Page.Name.ToLower().EndsWith("list")) 
{
    bool writeGetData = true;
    writeGetData = !FileContainsText(ViewModelFilePath, "GetData");
    if(writeGetData)
{#>  
        public async Task<ObservableCollection<<#= Page.Name #>ItemViewModel>> GetData()
        {

            List<<#= Page.Name #>ItemViewModel> list = new List<<#= Page.Name #>ItemViewModel>();

            //TODO - set listItems to data source
            dynamic listItems = null;
           
            foreach (var item in listItems)
            {
                var model = new <#= Page.Name #>ItemViewModel(this);
                await model.Init(item);
                list.Add(model);

            }

            ObservableCollection<<#= Page.Name #>ItemViewModel> retVal = new ObservableCollection<<#= Page.Name #>ItemViewModel>(list);

            return retVal;

        }
<#}}#>
    }
}
