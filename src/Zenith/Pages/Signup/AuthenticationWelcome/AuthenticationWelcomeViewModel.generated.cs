// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using PropertyChanged;
using Xamarin.Forms;

namespace Zenith
{
    [AddINotifyPropertyChangedInterface]
    public partial class AuthenticationWelcomeViewModel
    {
        //default services
        internal readonly Zenith.Abstractions.IErrorManager ErrorManager;

        //other services

        //commands
        public Command Login { get; private set; }
        public Command Activate { get; private set; }
        public Command OpenAccount { get; private set; }
        public Command RegisterNewDevice { get; private set; }

        //properties

        public AuthenticationWelcomeViewModel
        (
           Zenith.Abstractions.IErrorManager ErrorManager
        )
        {
            //setup default services
            this.ErrorManager = ErrorManager;

            //setup other services

            //setup commands
            Login = new Command(async () => await ExecuteLogin());
            Activate = new Command(async () => await ExecuteActivate());
            OpenAccount = new Command(async () => await ExecuteOpenAccount());
            RegisterNewDevice = new Command(async () => await ExecuteRegisterNewDevice());
  
            Setup();
        }

            
        private async Task ExecuteLogin()
        {
            try
            {
                await this.CoreMethods.DisplayAlert("Login","Login","OK");
            }
            catch(Exception ex)
            {
                await ErrorManager.DisplayErrorMessageAsync(ex);
            }
        }
            
        private async Task ExecuteActivate()
        {
            try
            {
                await this.CoreMethods.DisplayAlert("Activate","Activate","OK");
            }
            catch(Exception ex)
            {
                await ErrorManager.DisplayErrorMessageAsync(ex);
            }
        }
            
        private async Task ExecuteOpenAccount()
        {
            try
            {
                await this.CoreMethods.DisplayAlert("OpenAccount","OpenAccount","OK");
            }
            catch(Exception ex)
            {
                await ErrorManager.DisplayErrorMessageAsync(ex);
            }
        }
            
        private async Task ExecuteRegisterNewDevice()
        {
            try
            {
                await this.CoreMethods.DisplayAlert("RegisterNewDevice","RegisterNewDevice","OK");
            }
            catch(Exception ex)
            {
                await ErrorManager.DisplayErrorMessageAsync(ex);
            }
        }
 

    }
}
