// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using PropertyChanged;
using Xamarin.Forms;

namespace dalexFDA
{
    [AddINotifyPropertyChangedInterface]
    public partial class DashboardViewModel
    {
        //default services
        internal readonly dalexFDA.Abstractions.IErrorManager ErrorManager;

        //other services
        internal readonly Acr.UserDialogs.IUserDialogs Dialog;

        //commands
        public Command Overview { get; private set; }
        public Command History { get; private set; }

        //properties
        public bool IsOverviewTab { get; set; }
        public string LastSession { get; set; }
        public string TotalAmount { get; set; }

        public DashboardViewModel
        (
           dalexFDA.Abstractions.IErrorManager ErrorManager
          ,Acr.UserDialogs.IUserDialogs Dialog
        )
        {
            //setup default services
            this.ErrorManager = ErrorManager;

            //setup other services
            this.Dialog = Dialog;

            //setup commands
            Overview = new Command(async () => await ExecuteOverview());
            History = new Command(async () => await ExecuteHistory());
  
            Setup();
        }

            
        private async Task ExecuteOverview()
        {
            try
            {
                await this.CoreMethods.DisplayAlert("Overview","Overview","OK");
            }
            catch(Exception ex)
            {
                await ErrorManager.DisplayErrorMessageAsync(ex);
            }
        }
            
        private async Task ExecuteHistory()
        {
            try
            {
                await this.CoreMethods.DisplayAlert("History","History","OK");
            }
            catch(Exception ex)
            {
                await ErrorManager.DisplayErrorMessageAsync(ex);
            }
        }
 

    }
}
