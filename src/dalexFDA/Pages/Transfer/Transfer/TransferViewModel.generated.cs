// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using PropertyChanged;
using Xamarin.Forms;

namespace dalexFDA
{
    [AddINotifyPropertyChangedInterface]
    public partial class TransferViewModel
    {
        //default services
        internal readonly dalexFDA.Abstractions.IErrorManager ErrorManager;

        //other services
        internal readonly dalexFDA.Abstractions.IAppService AppService;
        internal readonly Acr.UserDialogs.IUserDialogs Dialog;

        //commands
        public Command Continue { get; private set; }
        public Command OpenBeneficiary { get; private set; }
        public Command OpenAccount { get; private set; }
        public Command OpenBank { get; private set; }
        public Command TextChanged { get; private set; }
        public Command Done { get; private set; }
        public Command Back { get; private set; }

        //properties
        public ObservableCollection<dalexFDA.Abstractions.TransferType> TransferType { get; set; }
        public List<dalexFDA.Abstractions.Beneficiary> FromBeneficiary { get; set; }
        public ObservableCollection<dalexFDA.Abstractions.DashboardAccountItem> FromAccount { get; set; }
        public string Amount { get; set; }
        public string Description { get; set; }
        public string BankName { get; set; }
        public string BankAccount { get; set; }
        public string AccountName { get; set; }
        public string Pin { get; set; }

        public TransferViewModel
        (
           dalexFDA.Abstractions.IErrorManager ErrorManager
          ,dalexFDA.Abstractions.IAppService AppService
          ,Acr.UserDialogs.IUserDialogs Dialog
        )
        {
            //setup default services
            this.ErrorManager = ErrorManager;

            //setup other services
            this.AppService = AppService;
            this.Dialog = Dialog;

            //setup commands
            Continue = new Command(async () => await ExecuteContinue());
            OpenBeneficiary = new Command(async () => await ExecuteOpenBeneficiary());
            OpenAccount = new Command(async () => await ExecuteOpenAccount());
            OpenBank = new Command(async () => await ExecuteOpenBank());
            TextChanged = new Command(async () => await ExecuteTextChanged());
            Done = new Command(async () => await ExecuteDone());
            Back = new Command(async () => await ExecuteBack());
  
            Setup();
        }

            
        private async Task ExecuteContinue()
        {
            try
            {
                await this.CoreMethods.DisplayAlert("Continue","Continue","OK");
            }
            catch(Exception ex)
            {
                await ErrorManager.DisplayErrorMessageAsync(ex);
            }
        }
            
        private async Task ExecuteOpenBeneficiary()
        {
            try
            {
                await this.CoreMethods.DisplayAlert("OpenBeneficiary","OpenBeneficiary","OK");
            }
            catch(Exception ex)
            {
                await ErrorManager.DisplayErrorMessageAsync(ex);
            }
        }
            
        private async Task ExecuteOpenAccount()
        {
            try
            {
                await this.CoreMethods.DisplayAlert("OpenAccount","OpenAccount","OK");
            }
            catch(Exception ex)
            {
                await ErrorManager.DisplayErrorMessageAsync(ex);
            }
        }
            
        private async Task ExecuteOpenBank()
        {
            try
            {
                await this.CoreMethods.DisplayAlert("OpenBank","OpenBank","OK");
            }
            catch(Exception ex)
            {
                await ErrorManager.DisplayErrorMessageAsync(ex);
            }
        }
            
        private async Task ExecuteTextChanged()
        {
            try
            {
                await this.CoreMethods.DisplayAlert("TextChanged","TextChanged","OK");
            }
            catch(Exception ex)
            {
                await ErrorManager.DisplayErrorMessageAsync(ex);
            }
        }
            
        private async Task ExecuteDone()
        {
            try
            {
                await this.CoreMethods.DisplayAlert("Done","Done","OK");
            }
            catch(Exception ex)
            {
                await ErrorManager.DisplayErrorMessageAsync(ex);
            }
        }
            
        private async Task ExecuteBack()
        {
            try
            {
                await this.CoreMethods.DisplayAlert("Back","Back","OK");
            }
            catch(Exception ex)
            {
                await ErrorManager.DisplayErrorMessageAsync(ex);
            }
        }
 

    }
}
