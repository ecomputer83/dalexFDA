using System;
using System.Diagnostics;
using System.Net.Http;
using Refit;

namespace dalexFDA.Data.WebServices
{
    public class RestServiceHelper
    {
        public static T For<T>(HttpClient client, RefitSettings settings)
        {
            var className = "AutoGenerated" + typeof(T).Name;
            var requestBuilder = RequestBuilder.ForType<T>(settings);
            var typeName = typeof(T).AssemblyQualifiedName.Replace(typeof(T).Name, className);
            var generatedType = Type.GetType(typeName);

            if (generatedType == null)
            {
                var message = typeof(T).Name + " doesn't look like a Refit interface. Make sure it has at least one " +
                    "method with a Refit HTTP method attribute and Refit is installed in the project.";

                throw new InvalidOperationException(message);
            }

            //ISession sessionService = FreshMvvm.FreshIOC.Container.Resolve<ISession>();

            //if (!string.IsNullOrEmpty(sessionService?.CurrentUser?.Token))
            //{
            //    Debug.WriteLine("token: {0}", sessionService?.CurrentUser?.Token);
            //    client.DefaultRequestHeaders.Add("Authorization", sessionService?.CurrentUser?.Token);
            //}

            return (T)Activator.CreateInstance(generatedType, client, requestBuilder);
        }

        public static T For<T>(HttpClient client)
        {
            return For<T>(client, null);
        }

        public static T For<T>(string hostUrl, RefitSettings settings)
        {
            // check to see if user provided custom auth token
            HttpMessageHandler innerHandler = null;
            if (settings != null)
            {
                if (settings.HttpMessageHandlerFactory != null)
                {
                    innerHandler = settings.HttpMessageHandlerFactory();
                }

                if (settings.AuthorizationHeaderValueGetter != null)
                {
                    innerHandler = new CustomAuthenticatedHttpClientHandler(settings.AuthorizationHeaderValueGetter, innerHandler);
                }
            }

            var client = new HttpClient(innerHandler ?? new HttpClientHandler()) { BaseAddress = new Uri(hostUrl) };
            return For<T>(client, settings);
        }

        public static T For<T>(string hostUrl) => For<T>(hostUrl, null);
    }
}
